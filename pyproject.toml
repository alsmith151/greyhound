[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "greyhound"
version = "0.1.0"
description = "A modern machine learning package for training models"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["machine learning", "deep learning", "neural networks", "training"]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "accelerate>=0.20.0",
    "peft>=0.4.0",
    "evaluate>=0.4.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tensorboard>=2.13.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "wandb>=0.15.0",
    "tokenizers>=0.13.0",
    "safetensors>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "black>=23.0",
    "ruff>=0.0.280",
    "mypy>=1.4",
    "pre-commit>=3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0",
]
docs = [
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.2",
    "myst-parser>=2.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
    "bitsandbytes>=0.41.0",
    "flash-attn>=2.0.0",
]
audio = [
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
]
vision = [
    "pillow>=9.0.0",
    "timm>=0.9.0",
]

[project.scripts]
greyhound-train = "greyhound.cli:train"
greyhound-eval = "greyhound.cli:evaluate"
greyhound-config = "greyhound.cli:config"

[project.urls]
Homepage = "https://github.com/yourusername/greyhound"
Repository = "https://github.com/yourusername/greyhound"
Documentation = "https://greyhound.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/greyhound/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/greyhound --cov-report=term-missing --cov-report=xml"

# Coverage configuration
[tool.coverage.run]
source = ["src/greyhound"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
